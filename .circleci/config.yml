# Java/Gradle CircleCI 2.1 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
version: 2.1
jobs:
  spring-test:
    parameters:
      spring-version:
        type: string
    environment:
      _JAVA_OPTIONS: "-Xmx3g"
      GRADLE_OPTS: "-Dorg.gradle.daemon=false"
      SPRING_VERSION: << parameters.spring-version >>
    docker:
      - image: circleci/openjdk:8-jdk-stretch
    steps:
      - checkout
      - restore_cache:
          key: v1-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
      - restore_cache:
          key: v1-gradle-cache-{{ checksum "build.gradle" }}
      - run:
          name: Test Spring compatibility
          command: |
            ./build/test-spring-compatibility.sh
      - run:
          name: Copy test artifacts
          command: |
            ./build/gather-test-artifacts.sh
          when: always
      - store_test_results:
          path: "test-results-all"
      - save_cache:
          paths:
            - ~/.gradle/wrapper
          key: v1-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
      - save_cache:
          paths:
            - ~/.gradle/caches
          key: v1-gradle-cache-{{ checksum "build.gradle" }}
  junit5-test:
    parameters:
      junit5-version:
        type: string
    environment:
      _JAVA_OPTIONS: "-Xmx3g"
      GRADLE_OPTS: "-Dorg.gradle.daemon=false"
      JUNIT5_VERSION: << parameters.junit5-version >>
    docker:
      - image: circleci/openjdk:8-jdk-stretch
    steps:
      - checkout
      - restore_cache:
          key: v1-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
      - restore_cache:
          key: v1-gradle-cache-{{ checksum "build.gradle" }}
      - run:
          name: Test JUnit 5 compatibility
          command: |
            ./build/test-junit5-compatibility.sh
      - run:
          name: Copy test artifacts
          command: |
            ./build/gather-test-artifacts.sh
          when: always
      - store_test_results:
          path: "test-results-all"
      - save_cache:
          paths:
            - ~/.gradle/wrapper
          key: v1-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
      - save_cache:
          paths:
            - ~/.gradle/caches
          key: v1-gradle-cache-{{ checksum "build.gradle" }}
  find-bugs:
    environment:
      _JAVA_OPTIONS: "-Xmx3g"
      GRADLE_OPTS: "-Dorg.gradle.daemon=false"
    docker:
      - image: circleci/openjdk:8-jdk-stretch
    steps:
      - checkout
      - restore_cache:
          key: v1-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
      - restore_cache:
          key: v1-gradle-cache-{{ checksum "build.gradle" }}
      - run:
          name: Find bugs
          command: |
            ./build/generate-findbugs-report.sh
  javadoc:
    environment:
      _JAVA_OPTIONS: "-Xmx3g"
      GRADLE_OPTS: "-Dorg.gradle.daemon=false"
    docker:
      - image: circleci/openjdk:8-jdk-stretch
    steps:
      - checkout
      - restore_cache:
          key: v1-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
      - restore_cache:
          key: v1-gradle-cache-{{ checksum "build.gradle" }}
      - run:
          name: Generate JavaDoc
          command: |
            ./build/generate-javadoc.sh
  build-library:
    parameters:
      jdk-version:
        type: string
    environment:
      _JAVA_OPTIONS: "-Xmx3g"
      GRADLE_OPTS: "-Dorg.gradle.daemon=false"
    docker:
      - image: << parameters.jdk-version >>
    steps:
      - checkout
      - restore_cache:
          key: v1-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
      - restore_cache:
          key: v1-gradle-cache-{{ checksum "build.gradle" }}
      - run:
          name: Run tests
          command: |
            ./build/test-and-package-all.sh
      - run:
          name: Copy test artifacts
          command: |
            ./build/gather-test-artifacts.sh
          when: always
      - run:
          name: Run integration tests
          command: |
            ./build/test-integration.sh
      - run:
          name: Copy test artifacts
          command: |
            ./build/gather-test-artifacts.sh
          when: always
      - store_test_results:
          path: "test-results-all"
      - store_artifacts:
          path: "test-results-all"
      - store_artifacts:
          path: core/build/libs
workflows:
  version: 2
  workflow:
    jobs:
    - build-library:
        matrix:
          parameters:
            jdk-version: [ "circleci/openjdk:8-jdk-stretch", "cimg/openjdk:17.0.0" ]
    - find-bugs:
        requires:
          - build-library
    - javadoc:
        requires:
          - build-library
    - spring-test:
        requires:
          - find-bugs
          - javadoc
        matrix:
          parameters:
            # Spring Core/Spring Security
            spring-version: ["5.3.10/5.5.2", "5.2.17.RELEASE/5.5.2", "5.1.20.RELEASE/5.5.2", "5.0.20.RELEASE/5.5.2",
                             "4.3.30.RELEASE/3.2.5.RELEASE", "4.2.9.RELEASE/3.2.5.RELEASE"]
    - junit5-test:
        requires:
          - find-bugs
          - javadoc
        matrix:
          parameters:
            junit5-version: ["5.0.0/4.12.3", "5.1.1", "5.2.0", "5.3.2", "5.4.2", "5.5.2", "5.6.3", "5.7.2", "5.8.1"]
