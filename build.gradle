def projectId = 'multi-user-test-runner'
def scmOrganization = 'Vincit'
def signPackage = Boolean.parseBoolean(
        project.hasProperty("signPackage") ? signPackage : "true"
)

static String readFile(String filename) {
    return new File(filename).getText("UTF-8");
}

static String getVersion() {
    try {
        return readFile("version");
    } catch(IOException e) {
        try {
            return readFile("../version");
        } catch(IOException ex) {
            return "dev";
        }
    }
}

def mutrVersion = getVersion()
def snapshotPrefix = '-SNAPSHOT'

task tagRelease << {
    version = mutrVersion ?: "test"

    exec {
        executable 'git'
        args 'tag', version
    }
    exec{
        executable 'git'
        args 'push', "ssh://git@$System.env.REPO_URL", "refs/tags/$version"
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'findbugs'
    apply plugin: 'signing'

    group = 'fi.vincit'
    sourceCompatibility = 1.8
    version = System.env.SNAPSHOT ? mutrVersion + snapshotPrefix : mutrVersion

    repositories {
        mavenCentral()
    }

    jar {
        manifest {
            attributes 'Implementation-Title': archivesBaseName,
                    'Implementation-Version': version
        }
    }

    if (signPackage) {
        signing {
            sign configurations.archives
        }
    }

    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    artifacts {
        archives javadocJar, sourcesJar
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(url: "$System.env.REPOSITORY_URL") {
                    authentication(
                            userName: "$System.env.DEPLOY_USERNAME",
                            password: "$System.env.DEPLOY_PASSWORD"
                    )
                }
                addFilter('core') {artifact, file ->
                    artifact.name == 'multi-user-test-runner'
                }

                def pomMetadata = {
                    name 'Multi User Test Runner'
                    packaging 'jar'
                    description '''
JUnit 4.12+ test runner for testing authentication with multiple users. Makes testing
authorization with multiple user/role combination easier and reduces amount of boilerplate
code.
'''
                    url "https://${scmOrganization}.github.io/$projectId/"

                    scm {
                        connection "scm:git:git@github.com/$scmOrganization/${projectId}.git"
                        developerConnection "scm:git:git@github.com/$scmOrganization/${projectId}.git"
                        url "https://github.com/$scmOrganization/$projectId"
                    }

                    inceptionYear '2015'
                    licenses {
                        license {
                            name 'The Apache License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }

                    developers {
                        developer {
                            id 'juhasipo'
                            name 'Juha Siponen'
                        }
                    }
                }
                pom('core').project pomMetadata

            }
        }
    }

    install.repositories.mavenInstaller.pom = uploadArchives.repositories.mavenDeployer.pom('core')


    tasks.withType(FindBugs) {
        reports {
            xml.enabled = false
            html.enabled = true
            ignoreFailures = true
            excludeFilter = file("$rootProject.projectDir/findBugsExcludeFilter.xml")
        }
    }


}


project(':core') {

    archivesBaseName = 'multi-user-test-runner'

    javadoc {
        failOnError = true
        options.overview = "src/main/java/overview.html"
    }

    dependencies {
        compileOnly group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
        compileOnly group: 'junit', name: 'junit', version: '4.12'
        testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
        testCompile group: 'junit', name: 'junit', version: '4.12'
        testCompile group: 'org.mockito', name: 'mockito-all', version: '1.10.19'
        compileOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.0.0'
        compileOnly group: 'org.junit.platform', name: 'junit-platform-runner', version: '1.0.0'
    }
}

project(':integration-test') {
    dependencies {
        compile project(':core')

        testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
        testCompile group: 'junit', name: 'junit', version: '4.12'
    }
}

project(':junit-5-legacy-test') {
    dependencies {
        compile project(':core')
        compile project(':integration-test')
        testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.0.0-M2'
        testCompile group: 'org.junit.vintage', name: 'junit-vintage-engine', version: '4.12.0-M2'
    }
    sourceCompatibility = 1.8
}

project(':junit-5-test') {
    dependencies {
        compile project(':core')
        compile project(':integration-test')
        testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.0.0'
        testCompile group: 'org.junit.platform', name: 'junit-platform-runner', version: '1.0.0'
        testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
    }
    sourceCompatibility = 1.8
}

project(':spring-test') {

    def v = System.env.SPRING_VERSION ?: "4.2.0.RELEASE/3.2.5.RELEASE"
    def parts = v.split("/")

    def springVersion = parts[0]
    def springSecurityVersion = parts[1]

    println("Using Spring version ${springVersion}")
    println("Using Spring Security version ${springSecurityVersion}")

    dependencies {
        compile project(':core')
        compile project(':integration-test')

        compile group: 'org.springframework.security', name: 'spring-security-core', version: springSecurityVersion
        compile group: 'org.springframework', name: 'spring-test', version: springVersion

        testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
        testCompile group: 'junit', name: 'junit', version: '4.12'

    }
}

project(':examples') {

    sourceCompatibility = 1.8

    def springBootVersion = '2.0.0.RELEASE'
    def h2Version = '1.4.192'

    dependencies {
        compile("org.springframework.boot:spring-boot-starter-web:$springBootVersion")
        compile("org.springframework.boot:spring-boot-starter-security:$springBootVersion")
        compile("org.springframework.boot:spring-boot-starter-data-jpa:$springBootVersion")
        compile("com.h2database:h2:$h2Version")
        compile("org.apache.httpcomponents:httpclient:4.5.3")
        compile("javax.interceptor:javax.interceptor-api:1.2.2") // For JavaDoc as @Transactional requires it
        testCompile project(':core')
        testCompile("org.springframework.boot:spring-boot-starter-test:$springBootVersion")
        testCompile group: 'junit', name: 'junit', version: '4.12'
        testCompile 'com.jayway.restassured:rest-assured:2.5.0'
        testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.0.0'
        testCompile group: 'org.junit.platform', name: 'junit-platform-runner', version: '1.0.0'
    }

    // From Petri Kainnulainen's examples
    // https://github.com/pkainulainen/gradle-examples/blob/master/integration-tests/build.gradle

    sourceSets {
        integrationTest {
            java {
                compileClasspath += main.output + test.output
                runtimeClasspath += main.output + test.output
                srcDir file('src/test/java')
            }
        }
    }

    task integrationTest(type: Test) {
        testClassesDir = sourceSets.integrationTest.output.classesDir
        classpath = sourceSets.integrationTest.runtimeClasspath
    }
    configurations {
        integrationTestCompile.extendsFrom testCompile
        integrationTestRuntime.extendsFrom testRuntime
    }
    check.dependsOn integrationTest
    integrationTest.mustRunAfter test
}
